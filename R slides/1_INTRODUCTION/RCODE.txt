
# VECTORS

x<-c(3,5,2,1,6)
sort(x)
sort(x,decreasing=T)
rank(x)

x2<-c(3,5,2,1,6,3)
rank(x2, ties.method="average")
rank(x2, ties.method="first")
rank(x, ties.method="random")
rank(x, ties.method="random")
rank(x, ties.method="min")
rank(x, ties.method="max")

order(x)

character(length=2)

as.character()
x<-1:10
as.character(x)
as.numeric()
x<-c("-0.1","2.7","B")
as.numeric(x)
y<-as.character(x)
is.character(y)
x<-c("-0.1","2.7","B")
is.character(x)
x<-as.numeric(x)
x<-1:10
y<-as.character(x)
noquote(y)
nchar(y)
paste(x)
paste('Mathematical','Statistics')
paste('3','5','8', sep="+")
paste(paste(3,5, sep=' + '), 8, sep=' = ')
paste('Chapter',2, sep=" ")
paste("Today is", date())
a<-c('Kwstas', 'Maria')
b<-c('Papadopoulos', 'Kyriakou')
paste(a,b)
paste(b,a, sep=', ')
paste("Chapter", 1:2, sep=" ")
a<-c('Kwstas', 'Maria')
b<-c('Papadopoulos', 'Kyriakou', 'Anagnostou')
paste(a,b)
a<-c('Kwstas', 'Maria')
paste(a, collapse=",")
paste(1:10, collapse='+')
b<-c('Papadopoulos', 'Kyriakou', 'Anagnostou')
paste(a, b, collapse=", ")

x<-c("Statistics", "Mathematics")
strsplit(x,split="a")
strsplit(x, split='')
strsplit(x, split="th")
substr("abcdef",2,4)
x<-c("Statistics", "Mathematics")
substr(x,2,4)
countries<-c("Greece", "United States", 
"United Kingdom", "Italy", 
"France", "United Arab Emirates")
grep("United", countries)
grep("United", countries, value=TRUE)
data[grep("United", data$country), ]
values<-c("1,700", "2,300")
as.numeric(values)
as.numeric(gsub(",","",values))
as.numeric(sub(",","",values))
sub(",","",values)
gsub(",","",values)
values<-c("1,000,000", "2,000,000") 
sub(",","",values)
gsub(",","",values)
#[1] "1000000" "2000000"
toupper () & tolower()
x<-c("Statistics", "Mathematics")
tolower(x)
#[1] "statistics"  "mathematics"
toupper(x)
#[1] "STATISTICS"  "MATHEMATICS



#MATRICES

x<-1:10
X<-matrix(x, ncol=2)
X
X<-matrix(x, nrow=5)
X
X<-matrix(x, nrow=5, byrow=T)
dim(X)
X[3,2]
X[3,]
X[,2]
x1<-1:5
x2<-6:10
cbind(x1,x2)
rbind(x1,x2)
diag(1:5)
diag(5)
x<-matrix(c(1,2,3,4,5,6), ncol=2)
x
y<-matrix(c(0,1,1,1), ncol=2)
y
x%*%y
t(x)
solve(y)
x<-matrix(c(1,2,3,4,5,6), ncol=2)
x
apply(x,1,sum)
apply(x,2,sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)

#DATA FRAMES

Gender<-c('Male', 'Male', 'Male', 'Female')
Gender<-factor(Gender)
Gender
Smoking<-c(T, T, F, F)
Smoking<-factor(Smoking)
Choresterol<-c(200, 220, 180, 172)
sample<-data.frame(Gender, Smoking, Choresterol)
sample
#  Gender Smoking Choresterol
#1   Male    TRUE         200
#2   Male    TRUE         220
#3   Male   FALSE         180
#4 Female   FALSE         172

x<-matrix(c(1,1,200,1,1,220, 1,0,180,0,0,172), ncol=3, byrow=T)
x
x<-as.data.frame(x)
x
names(x)<-c('Gender', 'Smoking', 'Choresterol')
x
x<-data.frame(x, row.names=c('obs1', 'obs2', 'obs3', 'obs4') )
x
dim(x)
x[1,]
x[1,2]
x$Gender
rbind(1,x)
cbind(1,x)
#        1 Gender Smoking Choresterol
#obs1 1      1       1         200
#obs2 1      1       1         220
#obs3 1      1       0         180
#obs4 1      0       0         172


#LISTS

Gender<-c('Male', 'Male', 'Male', 'Female')
x<-1:10
sample
y<-list(my_sample=sample, x=x, the_gender=Gender)
y
y$x
y[[3]]
y$x[1:3]

#DPUT & DGET

y <- data.frame(a = 1, b = "a")
dput(y)
structure(list(a = 1,
b = structure(1L, .Label = "a",
class = "factor")),
.Names = c("a", "b"), row.names = c(NA, -1L),
class = "data.frame")
dput(y, file = "y.R")
new.y <- dget("y.R")
new.y

#DUMP

x <- "foo"
y <- data.frame(a = 1, b = "a")
dump(c("x", "y"), file = "data.R")
rm(x, y)
source("data.R")
y
x


#FUNCTIONS

x<-0.10
if(x<=0.05)
   {
    h<-x^2
   } else
   {
    h<-0.25
   }

if(x<=0.05)
   {
    h<-x^2
   } else if(x>0.25 & x<=1)
   {
    h<-0.25
   } else
   {
    h<-1
   }

x<-c(3,6,2,7)
n<-length(x)
proda<-1
summ<-0
for(i in 1:n)
   {
    summ<-summ+x[i]
    proda<-proda*x[i]
   }


x<-1
tolerance<-0.000001
f<-x^3+2*x^2-7
f.prime<-3*x^2+4*x
while(abs(f)>tolerance)
 {
  x<-x-f/f.prime
  f<-x^3+2*x^2-7
  f.prime<-3*x^2+4*x
 }

x<-1
tolerance<-0.000001
f<-x^3+2*x^2-7
f.prime<-3*x^2+4*x
repeat
   {
    x<-x-f/f.prime
    f<-x^3+2*x^2-7
    f.prime<-3*x^2+4*x
    if(abs(f) <= tolerance) break
   }

fact1<-function(x){
	 y<-floor(x)
	 if (y!=x | x<0) 
	 print("Your number is not natural") 
	 else
	 {
	 f<-1
	 if (x<2) return(f)
	 for (i in 2:x) {
	 f<-f*i
	 }
        return(f)
	 }
        }
	
fact2<-function(x){
      y<-floor(x)
	if (y!=x | x<0) 
	print("Your number is not natural") 
	else
	{
	f<-1
	t<-x
	while(t>1){
	f<-f*t
	t<-t-1
	}
	return(f)
	}
	}

fact3<-function(x){
	 y<-floor(x)
	 if (y!=x | x<0) 
	 print("Your number is not natural") 
	else
	 {
	f<-1
	t<-x
	repeat{
	if (t<2) break
	f<-f*t
	t<-t-1
	 }
	return(f)
	}
	}
fact4<-function(x){
	 y<-floor(x)
	 if (y!=x|x<0) 
	 print("Your number is not natural") 
	else
	 {
	 return(max(cumprod(1:x)))
	 }
	 }


#LOOP FUNCTIONS

x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), 
                d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
lapply(split(x, f), mean)

library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")],
na.rm = TRUE))

x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = TRUE))

list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
#Instead we can do
mapply(rep, 1:4, 4:1)

noise <- function(n, mean, sd) {
 rnorm(n, mean, sd)
 }
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)


#DESCRIPTIVE
 
x<-c(46, 104, 94, 114, 35, 70, 120, 29, 19, 135, 200, 222, 89,  100, 55, 214, 15, 81, 118, 193) 
y<-c(60, 119, 100, 130, 43, 227, 23, 91, 128, 199, 85, 125, 40,  26, 141, 212, 238, 94, 111, 67)
hist(x)
hist(x, nclass=10)
hist(x, breaks=seq(from=0,to=240,by=30))
hist(x, probability=T)
boxplot(x)
boxplot(x,y, names=c('X', 'Y'))

Transportation<-c("C", "C", "B", "M", "M", "C", "M", "M", "F", "C", "F", "B", "B", "M", "M", "C", "C", "C", "M", "C")
Transportation<-factor(Transportation)
Gender<-c(rep("M",10), rep("F", 10))
Gender
Gender<-factor(Gender)
table(Transportation)
prop.table(table(Transportation))
mytable<-table(Transportation,Gender)
mytable
margin.table(mytable, 1)
margin.table(mytable, 2)
prop.table(mytable)
prop.table(mytable, 1)
prop.table(mytable, 2)

freq_table<-table(Transportation,Gender)
barplot(freq_table, xlim=c(0,3), xlab="Gender", legend=levels(Transportation), col=1:4)
freq_table<-table(Gender, Transportation)
barplot(freq_table, width=0.85, xlim=c(0,5), xlab="Transportation", legend=levels(Gender), col=1:2)

freq_table<-table(Transportation,Gender)
barplot(prop.table(freq_table,1), width=0.25, xlim=c(0,3), ylim=c(0,0.7), xlab="Gender", legend=levels(Transportation), beside=T, col=1:4)
freq_table<-table(Gender, Transportation)
barplot(prop.table(freq_table,1), width=0.25, xlim=c(0,3.6), xlab="Transportation", legend=levels(Gender), beside=T, col=1:2)

#DISTRIBUTION PLOTS

x<-seq(0,10, 0.01)
plot(x, dgamma(x,1,1), type='l')

n<-6
p<-0.1
x<-0:6
pr<-dbinom(x,n,p)
plot(x,pr,type="h",xlim=c(0,6),ylim=c(0,1), col="blue",ylab="p")
points(x,pr,pch=20,col="dark red")

#SIMULATION

x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)

x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y)

x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x, y)

sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10) ## permutation
sample(1:10)
sample(1:10, replace = TRUE) ## Sample w/replacement
sample(1:5, replace = TRUE, prob=c(0.3, 0.3, 0.4, 0,0)) ## Sample w/replacement and pre-specified probabilities


# PLOTTING

x<-rnorm(100)
plot(x)
plot(x, pch=11)
plot(x, pch='A')
plot(x, pch=c('A', 'B'))

plot(1:10, c(5, 4, 3, 2, 1, 2, 3, 4, 3, 2), col=c("red", 
      "blue", "green", "beige", "goldenrod", "turquoise", 
			"salmon", "purple", "pink", "seashell"))

x <- c(1:5); y <- x # create some data 
par(pch=22, col="red") # plotting symbol and color 
par(mfrow=c(2,4)) # all plots on one page 
opts = c("p","l","o","b","c","s","S","h") 
for(i in 1:length(opts)){ 
  heading = paste("type=",opts[i]) 
  plot(x, y, type="n", main=heading) 
  lines(x, y, type=opts[i]) 
} 


plot(c(100, 200), c(300, 450), type= "n", xlab="", ylab="")
rect(100, 300, 125, 350)
plot(c(100, 300), c(300, 450), type= "n", xlab="", ylab="")
polygon(c(140, 120, 120, 160, 160), c(440, 400, 320, 320, 400))
plot(c(100, 300), c(300, 450), type= "n", xlab="", ylab="")
polygon(c(140, 120, 120, 160, 160, NA, 240, 220, 220, 260, 260),    
   c(440, 400, 320, 320, 400, NA, 440, 400, 320, 320, 400))
curve(x^3 - 3*x, -2, 2, ylab="f")
curve(x^2 - 2, add = TRUE, col = "blue")
plot(c(100, 300), c(300, 450), type= "n", xlab="", ylab="")
text(150, 380, "STATISTICS")
plot(c(100, 300), c(300, 450), type= "n", xlab="", ylab="")
text(150, 380, "STATISTICS", srt=30, cex=2, font=4)

weight<-c(72, 83, 79, 90, 88, 60, 55, 70, 72, 74)
gender<-rep(c("M", "F"), each=5)
plot(weight, type="n")
text(weight, label=gender)
plot(x)
identify(x, n=1)

attach(mtcars) # attach dataset mtcars
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt") 


#Install and Download library ElemStatLearn
library(ElemStatLearn)
data(ozone)
pairs(ozone) 
matplot(ozone$ozone, ozone, xlab="Ozone", ylab="Variables")

f <- function(x, y)   #the standard bivariate # normal density
   {
     z<-(1/(2*pi))*exp(-0.5*(x^2+y^2))
   }
y <- seq(-3,3, length=100)
x <-seq(-3,3, length=100)
z<-outer(x,y,f)   #compute density for all x, y
persp(x,y,z)
persp(x,y,z, theta=45, phi=30, expand=0.6, ticktype="detailed", xlab="X", ylab="Y", zlab="f(x,y)")
contour(x,y,z)
image(x,y,z)

n<-20
p<-0.2
y<-0:20
pr<-dbinom(y,n,p)
plot(y,pr,type="h", xlim=c(0,20), ylim=c(0,0.23), ylab="Probability")
mu = n * p; sigma = sqrt(n * p * (1 - p))
curve(dnorm(x, mu, sigma), add=TRUE, lwd=2, lty=2)
text(13, 0.15, expression(paste(frac(1, sigma*sqrt(2*pi)), " ", e^{frac(-(y-mu)^2, 2*sigma^2)})), cex = 1.5)













